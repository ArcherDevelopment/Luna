local i1lilI11il1li1l1i1l = assert local lIlIllliIliiIll1II1Il = select local lilll111lll1IIillll = tonumber local lilIll1lili1IiiIIl1 = unpack local iliiIi1iIiliIIIIIIi = pcall local iIlill11IIlI1i1iIil = setfenv local IIlIi111IlIilllI1l1 = setmetatable local lIliI1ll1Il111l11Ii1l = type local lIll1IiiiIiIIiIlil11I = getfenv local IIlilliiIiI11111Ili = tostring local ililllii11liiiIi1iI = error local lIlIiiiiIl1iII1iII1II = string.sub local lllI11Iii111i1li1I1 = string.byte local lIliIlIiiilIi1iiI1lli = string.char local iI11iIIlIlll1i11l1i = string.rep local i1Ili11I1lII1ililll = string.gsub local IliIiiIIiIili1lilI1 = string.match local lIlili11liIl1ilIIII = table.insert local lIlilIl1ll1II11I1iIIi = lllI11Iii111i1li1I1("T", 1) local I1lIi111l1lli11Il1i, lilIl1l11li1II11IiI = #{196}, #{ 4711, 5707, 6869, 6231, 6560, 2218, 5061, 4355, 2930, 2353, 4634, 6604, 3256, 3944, 2307, 1461, 616, 5259, 2341, 1697, 2831, 3519 } + lIlilIl1ll1II11I1iIIi + 130965 local I1IllIIIillI1I1l11I = {} local iIillIllllI111I1Ili = 1 local lIlIlllIlIIII1l1liIli, iil1I1iiiIl1lI1i11I local function I1I1IiiIi11I1IllI1l(II1II1li1IIilIiliil, Ilii1liI1Ili111lliI) local lIlIllI1l11IlliIlIi1l II1II1li1IIilIiliil = i1Ili11I1lII1ililll(lIlIiiiiIl1iII1iII1II(II1II1li1IIilIiliil, 5), "..", function(i1l1Iill1i1i1iIilI1) if lllI11Iii111i1li1I1(i1l1Iill1i1i1iIilI1, 2) == 72 then lIlIllI1l11IlliIlIi1l = lilll111lll1IIillll(lIlIiiiiIl1iII1iII1II(i1l1Iill1i1i1iIilI1, 1, 1)) return "" else local lIlii1lii11iI1IIIilli = lIliIlIiiilIi1iiI1lli(lilll111lll1IIillll(i1l1Iill1i1i1iIilI1, 16)) if lIlIllI1l11IlliIlIi1l then local iIIlllIlli1lilIl1li = iI11iIIlIlll1i11l1i(lIlii1lii11iI1IIIilli, lIlIllI1l11IlliIlIi1l) lIlIllI1l11IlliIlIi1l = nil return iIIlllIlli1lilIl1li else return lIlii1lii11iI1IIIilli end end end) local function lIl11ll1iiIIlil111il1() local llII1lIlll1IiI1IIi1 = lllI11Iii111i1li1I1(II1II1li1IIilIiliil, iIillIllllI111I1Ili, iIillIllllI111I1Ili) iIillIllllI111I1Ili = iIillIllllI111I1Ili + 1 return llII1lIlll1IiI1IIi1 end local function lIll1l1IIlllIiIlIli() local llII1lIlll1IiI1IIi1, lIlii1lii11iI1IIIilli, iIIlllIlli1lilIl1li, i1ii1lII11iilIi111I = lllI11Iii111i1li1I1(II1II1li1IIilIiliil, iIillIllllI111I1Ili, iIillIllllI111I1Ili + 3) iIillIllllI111I1Ili = iIillIllllI111I1Ili + 4 return i1ii1lII11iilIi111I * 16777216 + iIIlllIlli1lilIl1li * 65536 + lIlii1lii11iI1IIIilli * 256 + llII1lIlll1IiI1IIi1 end local function l1I1il1II1IIl1Iliii(i1IIl11IIliIi1iI1Ii, iI1iiIIl1i1IIilii1I, l1lI1lIi1iIl1i1lll1) if l1lI1lIi1iIl1i1lll1 then local lIl1liII1iIII1l11liI1, iIilill1l1ll11iIlII = 0, 0 for llIiliIl1IlI1ll11Il = iI1iiIIl1i1IIilii1I, l1lI1lIi1iIl1i1lll1 do lIl1liII1iIII1l11liI1 = lIl1liII1iIII1l11liI1 + 2 ^ iIilill1l1ll11iIlII * l1I1il1II1IIl1Iliii(i1IIl11IIliIi1iI1Ii, llIiliIl1IlI1ll11Il) iIilill1l1ll11iIlII = iIilill1l1ll11iIlII + 1 end return lIl1liII1iIII1l11liI1 else local lIili1iiiii1Ili1IiI = 2 ^ (iI1iiIIl1i1IIilii1I - 1) return lIili1iiiii1Ili1IiI <= i1IIl11IIliIi1iI1Ii % (lIili1iiiii1Ili1IiI + lIili1iiiii1Ili1IiI) and 1 or 0 end end local function Ili1liI1l1liIlIlIl1() local llII1lIlll1IiI1IIi1, lIlii1lii11iI1IIIilli = lIll1l1IIlllIiIlIli(), lIll1l1IIlllIiIlIli() if llII1lIlll1IiI1IIi1 == 0 and lIlii1lii11iI1IIIilli == 0 then return 0 end return (-2 * l1I1il1II1IIl1Iliii(lIlii1lii11iI1IIIilli, 32) + 1) * 2 ^ (l1I1il1II1IIl1Iliii(lIlii1lii11iI1IIIilli, 21, 31) - 1023) * ((l1I1il1II1IIl1Iliii(lIlii1lii11iI1IIIilli, 1, 20) * 4294967296 + llII1lIlll1IiI1IIi1) / 4503599627370496 + 1) end local l1IlIi111I1lililIlI = bit or bit32 local iiIlliii1i1IlI1lI1i = l1IlIi111I1lililIlI and l1IlIi111I1lililIlI.bxor or function(llII1lIlll1IiI1IIi1, lIlii1lii11iI1IIIilli) local Iii1ilI1l1IIi1llill = 1 local iIIlllIlli1lilIl1li = 0 while llII1lIlll1IiI1IIi1 > 0 and lIlii1lii11iI1IIIilli > 0 do local lIlIIiilI11I11lilIili = llII1lIlll1IiI1IIi1 % 2 local illiIi1iiliiIiI1lii = lIlii1lii11iI1IIIilli % 2 if lIlIIiilI11I11lilIili ~= illiIi1iiliiIiI1lii then iIIlllIlli1lilIl1li = iIIlllIlli1lilIl1li + Iii1ilI1l1IIi1llill end llII1lIlll1IiI1IIi1 = (llII1lIlll1IiI1IIi1 - lIlIIiilI11I11lilIili) / 2 lIlii1lii11iI1IIIilli = (lIlii1lii11iI1IIIilli - illiIi1iiliiIiI1lii) / 2 Iii1ilI1l1IIi1llill = Iii1ilI1l1IIi1llill * 2 end if llII1lIlll1IiI1IIi1 < lIlii1lii11iI1IIIilli then llII1lIlll1IiI1IIi1 = lIlii1lii11iI1IIIilli end while llII1lIlll1IiI1IIi1 > 0 do local lIlIIiilI11I11lilIili = llII1lIlll1IiI1IIi1 % 2 if lIlIIiilI11I11lilIili > 0 then iIIlllIlli1lilIl1li = iIIlllIlli1lilIl1li + Iii1ilI1l1IIi1llill end llII1lIlll1IiI1IIi1 = (llII1lIlll1IiI1IIi1 - lIlIIiilI11I11lilIili) / 2 Iii1ilI1l1IIi1llill = Iii1ilI1l1IIi1llill * 2 end return iIIlllIlli1lilIl1li end local function lIliIiil1IiIiiIIlli(lIll1liI1l1llI11ll1l1) local i1l111l11lIIlIIi1iI = { lllI11Iii111i1li1I1(II1II1li1IIilIiliil, iIillIllllI111I1Ili, iIillIllllI111I1Ili + 3) } iIillIllllI111I1Ili = iIillIllllI111I1Ili + 4 local llII1lIlll1IiI1IIi1 = iiIlliii1i1IlI1lI1i(i1l111l11lIIlIIi1iI[1], iil1I1iiiIl1lI1i11I) local lIlii1lii11iI1IIIilli = iiIlliii1i1IlI1lI1i(i1l111l11lIIlIIi1iI[2], iil1I1iiiIl1lI1i11I) local iIIlllIlli1lilIl1li = iiIlliii1i1IlI1lI1i(i1l111l11lIIlIIi1iI[3], iil1I1iiiIl1lI1i11I) local i1ii1lII11iilIi111I = iiIlliii1i1IlI1lI1i(i1l111l11lIIlIIi1iI[4], iil1I1iiiIl1lI1i11I) iil1I1iiiIl1lI1i11I = (169 * iil1I1iiiIl1lI1i11I + lIll1liI1l1llI11ll1l1) % 256 return i1ii1lII11iilIi111I * 16777216 + iIIlllIlli1lilIl1li * 65536 + lIlii1lii11iI1IIIilli * 256 + llII1lIlll1IiI1IIi1 end local function lIl1iill11liIiIllI11i(lIli11iIllIi1IIllIIli) local i11I1iIlIliI1iilIi1 = lIll1l1IIlllIiIlIli() local Iii1IlIllii111ll1Ii = "" for llIiliIl1IlI1ll11Il = I1lIi111l1lli11Il1i, i11I1iIlIliI1iilIi1 do Iii1IlIllii111ll1Ii = Iii1IlIllii111ll1Ii .. lIliIlIiiilIi1iiI1lli(iiIlliii1i1IlI1lI1i(lllI11Iii111i1li1I1(II1II1li1IIilIiliil, iIillIllllI111I1Ili + llIiliIl1IlI1ll11Il - 1), lIlIlllIlIIII1l1liIli)) lIlIlllIlIIII1l1liIli = (lIli11iIllIi1IIllIIli * lIlIlllIlIIII1l1liIli + 63) % 256 end iIillIllllI111I1Ili = iIillIllllI111I1Ili + i11I1iIlIliI1iilIi1 return Iii1IlIllii111ll1Ii end lIlIlllIlIIII1l1liIli = lIl11ll1iiIIlil111il1() iil1I1iiiIl1lI1i11I = lIl11ll1iiIIlil111il1() local lIlIIi111II1IllI1iIIi = {} for llIiliIl1IlI1ll11Il = I1lIi111l1lli11Il1i, lIl11ll1iiIIlil111il1() do local i1llIIiliIIl1Il11li = lIl11ll1iiIIlil111il1() local ll1111lIiii1ilIlIi1 = (llIiliIl1IlI1ll11Il - 1) * 2 lIlIIi111II1IllI1iIIi[ll1111lIiii1ilIlIi1] = l1I1il1II1IIl1Iliii(i1llIIiliIIl1Il11li, 1, 4) lIlIIi111II1IllI1iIIi[ll1111lIiii1ilIlIi1 + 1] = l1I1il1II1IIl1Iliii(i1llIIiliIIl1Il11li, 5, 8) end local function lIl11illIiilIi1lliiII() local il1l1I11IIliI1IlI1I = { {}, nil, nil, nil, {}, {}, {} } local iIi11I1111i1i1ii1iI = lIll1l1IIlllIiIlIli() for llIiliIl1IlI1ll11Il = I1lIi111l1lli11Il1i, iIi11I1111i1i1ii1iI do il1l1I11IIliI1IlI1I[1][llIiliIl1IlI1ll11Il] = lIll1l1IIlllIiIlIli() end lIl11ll1iiIIlil111il1() lIl11ll1iiIIlil111il1() lIl11ll1iiIIlil111il1() lIll1l1IIlllIiIlIli() lIll1l1IIlllIiIlIli() il1l1I11IIliI1IlI1I[3] = lIl11ll1iiIIlil111il1() lIll1l1IIlllIiIlIli() lIll1l1IIlllIiIlIli() lIl11ll1iiIIlil111il1() il1l1I11IIliI1IlI1I[2] = lIl11ll1iiIIlil111il1() lIll1l1IIlllIiIlIli() local lIli1iI1lI1ill1iIIiIl = lIll1l1IIlllIiIlIli() - (#{ 2734, 6208, 3745, 3013, 559, 2101, 2183, 5623, 4036, 369, 4891, 431, 5762, 1254, 4163, 3177, 5414, 5427, 2689, 1404, 3147 } + lIlilIl1ll1II11I1iIIi + 133632) local lIlIiiIi1lIll1ili1iII = lIl11ll1iiIIlil111il1() for llIiliIl1IlI1ll11Il = I1lIi111l1lli11Il1i, lIli1iI1lI1ill1iIIiIl do local lIll1IIlIIlIliilii1iI = { nil, nil, nil, nil, nil, nil, nil, nil, nil, nil } local i1llIIiliIIl1Il11li = lIliIiil1IiIiiIIlli(lIlIiiIi1lIll1ili1iII) lIll1IIlIIlIliilii1iI[38248] = l1I1il1II1IIl1Iliii(i1llIIiliIIl1Il11li, #{ 2007, 5466, 989, 3136, 887, 5757, 6433, 6335, 1668, 1805, 2234, 3350, 4865, 3935, 98, 3603, 3575, 6483, 6792 }, #{ 3362, 46, 6713, 5152, 2186, 4672, 4367, 2667, 677, 2500, 2232, 2207, 1641, 1719, 765, 4233, 2197, 4429, 1669, 3069, 2850 } + lIlilIl1ll1II11I1iIIi + -79) lIll1IIlIIlIliilii1iI[6] = l1I1il1II1IIl1Iliii(i1llIIiliIIl1Il11li, #{ 4290, 4624, 700, 2461, 3357, 6451, 6242, 4216, 3193, 6719 }, #{ 6755, 6726, 2194, 2242, 3140, 4573, 2408, 3310, 5443, 3804, 4958, 1385, 2440, 123, 2909, 6556, 3482, 4346 }) lIll1IIlIIlIliilii1iI[2] = l1I1il1II1IIl1Iliii(i1llIIiliIIl1Il11li, #{6092}, #{ 6823, 2919, 6734, 4848, 2355, 4010, 6962, 1213, 1781 }) lIll1IIlIIlIliilii1iI[4] = l1I1il1II1IIl1Iliii(i1llIIiliIIl1Il11li, #{4944}, #{ 4802, 313, 1494, 3516, 4481, 1445, 957, 767, 2482, 2321, 101, 3108, 2433, 1072, 1216, 6775, 5801, 5927 }) lIll1IIlIIlIliilii1iI[10] = l1I1il1II1IIl1Iliii(i1llIIiliIIl1Il11li, #{ 5994, 4024, 3617, 594, 2479, 2248, 1964, 4126, 3421, 296, 2551, 5069, 4023, 1101, 2998, 4250, 1692, 811, 4043 }, #{ 1638, 852, 1113, 5157, 2502, 3270, 1474, 5582, 5206, 1885, 4027, 4227, 222, 2287, 1061, 4775, 6354, 3699, 5095, 5931, 6332 } + lIlilIl1ll1II11I1iIIi + -79) lIll1IIlIIlIliilii1iI[5] = l1I1il1II1IIl1Iliii(i1llIIiliIIl1Il11li, #{ 5372, 6537, 2267, 722, 3897, 806, 3737, 5939, 4134, 2350, 5785, 5639, 4750, 6080, 6525, 5532, 232, 6208, 437, 1313, 979, 4529 } + lIlilIl1ll1II11I1iIIi + -79, #{ 5648, 6589, 3055, 5671, 817, 2883, 1663, 3440, 5377, 303, 6747, 2546, 5884, 4268, 906, 2270, 1189, 855, 464, 1409 } + lIlilIl1ll1II11I1iIIi + -72) lIll1IIlIIlIliilii1iI[15914] = l1I1il1II1IIl1Iliii(i1llIIiliIIl1Il11li, #{ 1391, 758, 1817, 5332, 3618, 1337, 3743, 6882, 5427, 1999, 6621, 1390, 1824, 346, 3586, 3079, 1408, 5565, 2500, 5226, 6233, 2715, 3558, 2256 } + lIlilIl1ll1II11I1iIIi + -81, #{ 6622, 18, 1795, 2392, 1762, 6101, 4107, 334, 3785, 2955, 4884, 1291, 5477, 4904, 4750, 685, 990, 4830, 6716, 666, 2313, 528, 3133 } + lIlilIl1ll1II11I1iIIi + -75) lIll1IIlIIlIliilii1iI[34395] = l1I1il1II1IIl1Iliii(i1llIIiliIIl1Il11li, #{ 1391, 758, 1817, 5332, 3618, 1337, 3743, 6882, 5427, 1999, 6621, 1390, 1824, 346, 3586, 3079, 1408, 5565, 2500, 5226, 6233, 2715, 3558, 2256 } + lIlilIl1ll1II11I1iIIi + -81, #{ 6622, 18, 1795, 2392, 1762, 6101, 4107, 334, 3785, 2955, 4884, 1291, 5477, 4904, 4750, 685, 990, 4830, 6716, 666, 2313, 528, 3133 } + lIlilIl1ll1II11I1iIIi + -75) il1l1I11IIliI1IlI1I[5][llIiliIl1IlI1ll11Il] = lIll1IIlIIlIliilii1iI end lIl11ll1iiIIlil111il1() local iIi11I1111i1i1ii1iI = lIll1l1IIlllIiIlIli() - (#{ 162, 6253, 6691, 2298, 711, 843, 413, 2927, 5874, 2982, 824, 1963, 4422, 2248, 1817, 4873, 6717, 1402, 3472, 355 } + lIlilIl1ll1II11I1iIIi + 133680) local i111llIlII11iIl1i1I = lIl11ll1iiIIlil111il1() for llIiliIl1IlI1ll11Il = I1lIi111l1lli11Il1i, iIi11I1111i1i1ii1iI do local lIlliilll1lIIiIiIll1i local lIliI1ll1Il111l11Ii1l = lIl11ll1iiIIlil111il1() if lIliI1ll1Il111l11Ii1l == #{ 4153, 881, 173, 2725, 4943, 2011, 1951, 5981, 5561, 5839, 1883, 5259, 5525, 1642, 2852, 60, 5800, 2472, 1192, 6051, 5942 } + lIlilIl1ll1II11I1iIIi + -79 then lIlliilll1lIIiIiIll1i = lIlIiiiiIl1iII1iII1II(lIl1iill11liIiIllI11i(insEncKey), #{ 5619, 3484, 3927, 3213, 6444 }) end if lIliI1ll1Il111l11Ii1l == #{ 2818, 5319, 1768, 3342, 5612, 5080, 578, 3946, 5493, 3893, 1729, 5675, 1421, 49, 379, 2183, 4228, 4808, 1608, 2665, 1598 } + lIlilIl1ll1II11I1iIIi + -13 then lIlliilll1lIIiIiIll1i = Ili1liI1l1liIlIlIl1() end if lIliI1ll1Il111l11Ii1l == #{ 698, 3958, 2816, 1863, 4518, 2944, 6601, 2663, 4476, 4213, 984, 985, 5361, 4121, 6461, 944, 325, 2916, 1303, 1515, 3537, 6486, 2505 } + lIlilIl1ll1II11I1iIIi + -41 then lIlliilll1lIIiIiIll1i = #{ 3031, 2422, 6101, 2277, 3623, 3492, 3243, 2918, 1223, 4137, 349, 5498, 450, 6018, 1803, 2161, 1909, 1705, 4926, 6388, 4716, 2948 } + lIlilIl1ll1II11I1iIIi + 39049 == #{ 3031, 2422, 6101, 2277, 3623, 3492, 3243, 2918, 1223, 4137, 349, 5498, 450, 6018, 1803, 2161, 1909, 1705, 4926, 6388, 4716, 2948 } + lIlilIl1ll1II11I1iIIi + 39049 end if lIliI1ll1Il111l11Ii1l == #{ 507, 6762, 1648, 3697, 1761, 5718, 5544, 1331, 2176, 5239, 1571, 3525, 5273, 2672, 6234, 1083, 1103, 6572, 4005, 5388, 6298 } + lIlilIl1ll1II11I1iIIi + 89 then lIlliilll1lIIiIiIll1i = lIlIiiiiIl1iII1iII1II(lIl1iill11liIiIllI11i(#{ 1088, 6210, 2414, 4400, 2238, 2491, 6674, 2367, 2432, 498, 6825, 4663, 3669, 6482, 1115, 3540, 1553, 2069, 3922, 5504 } + lIlilIl1ll1II11I1iIIi + 16), #{1732, 3498}) end if lIliI1ll1Il111l11Ii1l == #{ 49, 112, 4162, 6344, 1954, 6718, 5476, 3559, 1255, 5966, 1863, 1417, 186, 3161, 1978, 6666, 1690, 6748, 1907, 6415, 3886, 2961, 5166, 1729 } + lIlilIl1ll1II11I1iIIi + 17 then lIlliilll1lIIiIiIll1i = Ili1liI1l1liIlIlIl1() + Ili1liI1l1liIlIlIl1() end if lIliI1ll1Il111l11Ii1l == #{ 3710, 5794, 2741, 5247, 3838, 6958, 2935, 6945, 1765, 5858, 4308, 2944, 6069, 2150, 5181, 3191, 4048, 5852, 2368, 463, 1069 } + lIlilIl1ll1II11I1iIIi + 60 then lIlliilll1lIIiIiIll1i = lIlIiiiiIl1iII1iII1II(lIl1iill11liIiIllI11i(i111llIlII11iIl1i1I), #{3413, 2270}) end if lIliI1ll1Il111l11Ii1l == #{ 4744, 6882, 4094, 1521, 4400, 4184, 1211, 5281, 1339, 4570, 3045, 6675, 5453, 6733, 1612, 195, 2515, 2425, 3724, 57, 3471 } + lIlilIl1ll1II11I1iIIi + 87 then lIlliilll1lIIiIiIll1i = Ili1liI1l1liIlIlIl1() end if lIliI1ll1Il111l11Ii1l == #{ 1095, 6645, 3268, 5402, 466, 2422, 4426, 4256, 4555, 133, 1086, 1888, 2822, 1452, 2591, 1228, 5023, 5432, 1693, 3324, 5434 } + lIlilIl1ll1II11I1iIIi + 49 then lIlliilll1lIIiIiIll1i = #{ 6442, 20, 2852, 339, 4354, 3378, 4552, 4478, 4060, 2920, 1902, 2051, 3541, 1922, 3156, 5616, 1610, 2392, 4651, 3871, 6489, 2442 } + lIlilIl1ll1II11I1iIIi + 21417 == #{ 31, 4317, 5152, 5324, 1164, 6893, 2945, 4353, 373, 3116, 870, 3614, 3198, 6503, 3662, 1033, 2745, 4038, 1296, 710, 4017, 1592, 4727, 3863 } + lIlilIl1ll1II11I1iIIi + 12489 end if lIliI1ll1Il111l11Ii1l == #{ 6776, 2829, 612, 311, 3249, 4685, 6780, 6838, 856, 2112, 3084, 4497, 2475, 4243, 5433, 3611, 631, 1843, 5421, 3263 } + lIlilIl1ll1II11I1iIIi + -19 then lIlliilll1lIIiIiIll1i = lIlIiiiiIl1iII1iII1II(lIl1iill11liIiIllI11i(#{ 1088, 6210, 2414, 4400, 2238, 2491, 6674, 2367, 2432, 498, 6825, 4663, 3669, 6482, 1115, 3540, 1553, 2069, 3922, 5504 } + lIlilIl1ll1II11I1iIIi + 16), #{1732, 3498}) end il1l1I11IIliI1IlI1I[6][llIiliIl1IlI1ll11Il - I1lIi111l1lli11Il1i] = lIlliilll1lIIiIiIll1i end for llIiliIl1IlI1ll11Il = I1lIi111l1lli11Il1i, lIli1iI1lI1ill1iIIiIl do local lIll1IIlIIlIliilii1iI = il1l1I11IIliI1IlI1I[5][llIiliIl1IlI1ll11Il] local ii1IIiliilliI1I1111 = lIlIIi111II1IllI1iIIi[lIll1IIlIIlIliilii1iI[5]] if ii1IIiliilliI1I1111 == #{ 1873, 4357, 191 } then if lIll1IIlIIlIliilii1iI[2] > 255 then lIll1IIlIIlIliilii1iI[7] = true lIll1IIlIIlIliilii1iI[3] = il1l1I11IIliI1IlI1I[6][lIll1IIlIIlIliilii1iI[2] - 256] end if lIll1IIlIIlIliilii1iI[6] > 255 then lIll1IIlIIlIliilii1iI[1] = true lIll1IIlIIlIliilii1iI[9] = il1l1I11IIliI1IlI1I[6][lIll1IIlIIlIliilii1iI[6] - 256] end end if ii1IIiliilliI1I1111 == #{ 270, 2194, 593, 247 } then lIll1IIlIIlIliilii1iI[8] = il1l1I11IIliI1IlI1I[6][lIll1IIlIIlIliilii1iI[4]] end if ii1IIiliilliI1I1111 == #{2187, 1564} and lIll1IIlIIlIliilii1iI[6] > 255 then lIll1IIlIIlIliilii1iI[1] = true lIll1IIlIIlIliilii1iI[9] = il1l1I11IIliI1IlI1I[6][lIll1IIlIIlIliilii1iI[6] - 256] end if ii1IIiliilliI1I1111 == #{4674} and lIll1IIlIIlIliilii1iI[2] > 255 then lIll1IIlIIlIliilii1iI[7] = true lIll1IIlIIlIliilii1iI[3] = il1l1I11IIliI1IlI1I[6][lIll1IIlIIlIliilii1iI[2] - 256] end end lIll1l1IIlllIiIlIli() lIl11ll1iiIIlil111il1() local iIi11I1111i1i1ii1iI = lIll1l1IIlllIiIlIli() for llIiliIl1IlI1ll11Il = I1lIi111l1lli11Il1i, iIi11I1111i1i1ii1iI do il1l1I11IIliI1IlI1I[7][llIiliIl1IlI1ll11Il - I1lIi111l1lli11Il1i] = lIl11illIiilIi1lliiII() end il1l1I11IIliI1IlI1I[4] = lIl11ll1iiIIlil111il1() lIl11ll1iiIIlil111il1() lIll1l1IIlllIiIlIli() return il1l1I11IIliI1IlI1I end local function lIl1lIi11ili11I1iIllI(il1l1I11IIliI1IlI1I, Ilii1liI1Ili111lliI, lIlIliii1l111I1i1II1l) local i1lil11i1IIlllliiil, liIIIlll1IIlllIIl1I = 17, 8 local llI1il1lI1I1ilIl1l1 = il1l1I11IIliI1IlI1I[5] local Illli11li1iIiIIIilI = 3 local lIlIlIi1l1iiill1lII1i = il1l1I11IIliI1IlI1I[7] local liili1ll1ililIIlliI = il1l1I11IIliI1IlI1I[4] local IIli1Ii11ilIiiI1Il1 = il1l1I11IIliI1IlI1I[2] local ili1iIIIilllI1IIiii = 5 local IlIliiiI11I1Il1Illl = il1l1I11IIliI1IlI1I[1] local llIiliIIilIliiiI11l = 2 local function lIli1IiIi1I1IiI1Il1lI(...) local ilI1Iii1i1ll1Iii1Ii = 0 local liIlI11l11illilIII1 = { lilIll1lili1IiiIIl1({}, 1, IIli1Ii11ilIiiI1Il1) } local llI1l11lIIlliillI1I = 1 local lIIIl1IiIiiIIllIi1l = {} local ll11Il1iiI1iiil1iIl = {} local Ilii1liI1Ili111lliI = lIll1IiiiIiIIiIlil11I() local IiIlIl1l11II1liiill = { ... } local Iii1ilI1Ili1liIl1lI = #IiIlIl1l11II1liiill - 1 for llIiliIl1IlI1ll11Il = 0, Iii1ilI1Ili1liIl1lI do if llIiliIl1IlI1ll11Il < liili1ll1ililIIlliI then liIlI11l11illilIII1[llIiliIl1IlI1ll11Il] = IiIlIl1l11II1liiill[llIiliIl1IlI1ll11Il + 1] end end local function I1iII11iIlI1iIiiIIl(...) local iIIlllIlli1lilIl1li = lIlIllliIliiIll1II1Il("#", ...) local Ii11Ili1iI1iilliI1I = { ... } return iIIlllIlli1lilIl1li, Ii11Ili1iI1iilliI1I end local function lllI11i1i11iiIi1I1l() while true do local IillI1i11lI1i1l1iIi = llI1il1lI1I1ilIl1l1[llI1l11lIIlliillI1I] local i11l1IiIIIlIii11Iil = IillI1i11lI1i1l1iIi[5] llI1l11lIIlliillI1I = llI1l11lIIlliillI1I + 1 if i11l1IiIIIlIii11Iil < 12 then if i11l1IiIIIlIii11Iil >= 6 then if i11l1IiIIIlIii11Iil < 9 then if i11l1IiIIIlIii11Iil < 7 then local lIlii1lii11iI1IIIilli, iIIlllIlli1lilIl1li if IillI1i11lI1i1l1iIi[7] then lIlii1lii11iI1IIIilli = IillI1i11lI1i1l1iIi[3] else lIlii1lii11iI1IIIilli = liIlI11l11illilIII1[IillI1i11lI1i1l1iIi[2]] end if IillI1i11lI1i1l1iIi[1] then iIIlllIlli1lilIl1li = IillI1i11lI1i1l1iIi[9] else iIIlllIlli1lilIl1li = liIlI11l11illilIII1[IillI1i11lI1i1l1iIi[6]] end if lIlii1lii11iI1IIIilli == iIIlllIlli1lilIl1li ~= (IillI1i11lI1i1l1iIi[10] ~= 0) then llI1l11lIIlliillI1I = llI1l11lIIlliillI1I + 1 end elseif i11l1IiIIIlIii11Iil ~= 8 then if IillI1i11lI1i1l1iIi[6] == 254 then llI1l11lIIlliillI1I = llI1l11lIIlliillI1I - 1 llI1il1lI1I1ilIl1l1[llI1l11lIIlliillI1I] = { [5] = 24, [10] = (IillI1i11lI1i1l1iIi[10] - 164) % 256, [2] = (IillI1i11lI1i1l1iIi[2] - 164) % 256 } else liIlI11l11illilIII1[IillI1i11lI1i1l1iIi[10]] = -liIlI11l11illilIII1[IillI1i11lI1i1l1iIi[2]] end elseif IillI1i11lI1i1l1iIi[6] == 254 then llI1l11lIIlliillI1I = llI1l11lIIlliillI1I - 1 llI1il1lI1I1ilIl1l1[llI1l11lIIlliillI1I] = { [5] = 2, [10] = (IillI1i11lI1i1l1iIi[10] - 86) % 256, [6] = (IillI1i11lI1i1l1iIi[2] - 86) % 256 } else liIlI11l11illilIII1[IillI1i11lI1i1l1iIi[10]] = lIlIliii1l111I1i1II1l[IillI1i11lI1i1l1iIi[2]] end elseif i11l1IiIIIlIii11Iil >= 10 then if i11l1IiIIIlIii11Iil ~= 11 then local ii1II1l1Ili1lIIiiII = liIlI11l11illilIII1[IillI1i11lI1i1l1iIi[2]] local iIIlllIlli1lilIl1li if IillI1i11lI1i1l1iIi[1] then iIIlllIlli1lilIl1li = IillI1i11lI1i1l1iIi[9] else iIIlllIlli1lilIl1li = liIlI11l11illilIII1[IillI1i11lI1i1l1iIi[6]] end liIlI11l11illilIII1[IillI1i11lI1i1l1iIi[10] + 1] = ii1II1l1Ili1lIIiiII liIlI11l11illilIII1[IillI1i11lI1i1l1iIi[10]] = ii1II1l1Ili1lIIiiII[iIIlllIlli1lilIl1li] else for llIiliIl1IlI1ll11Il = IillI1i11lI1i1l1iIi[10], IillI1i11lI1i1l1iIi[2] do liIlI11l11illilIII1[llIiliIl1IlI1ll11Il] = nil end end else liIlI11l11illilIII1[IillI1i11lI1i1l1iIi[10]] = Ilii1liI1Ili111lliI[IillI1i11lI1i1l1iIi[8]] end elseif i11l1IiIIIlIii11Iil < 3 then if i11l1IiIIIlIii11Iil < 1 then Ilii1liI1Ili111lliI[IillI1i11lI1i1l1iIi[8]] = liIlI11l11illilIII1[IillI1i11lI1i1l1iIi[10]] elseif i11l1IiIIIlIii11Iil ~= 2 then local lIlii1lii11iI1IIIilli, iIIlllIlli1lilIl1li if IillI1i11lI1i1l1iIi[7] then lIlii1lii11iI1IIIilli = IillI1i11lI1i1l1iIi[3] else lIlii1lii11iI1IIIilli = liIlI11l11illilIII1[IillI1i11lI1i1l1iIi[2]] end if IillI1i11lI1i1l1iIi[1] then iIIlllIlli1lilIl1li = IillI1i11lI1i1l1iIi[9] else iIIlllIlli1lilIl1li = liIlI11l11illilIII1[IillI1i11lI1i1l1iIi[6]] end liIlI11l11illilIII1[IillI1i11lI1i1l1iIi[10]] = lIlii1lii11iI1IIIilli + iIIlllIlli1lilIl1li else local lIliilIiIIi1ll1ii11ll = IillI1i11lI1i1l1iIi[10] local ll1111lIiii1ilIlIi1 = lIliilIiIIi1ll1ii11ll + 2 local iiI1IIlI1II1li1ll1l = { liIlI11l11illilIII1[lIliilIiIIi1ll1ii11ll](liIlI11l11illilIII1[lIliilIiIIi1ll1ii11ll + 1], liIlI11l11illilIII1[lIliilIiIIi1ll1ii11ll + 2]) } for llIiliIl1IlI1ll11Il = 1, IillI1i11lI1i1l1iIi[6] do liIlI11l11illilIII1[ll1111lIiii1ilIlIi1 + llIiliIl1IlI1ll11Il] = iiI1IIlI1II1li1ll1l[llIiliIl1IlI1ll11Il] end if liIlI11l11illilIII1[lIliilIiIIi1ll1ii11ll + 3] ~= nil then liIlI11l11illilIII1[lIliilIiIIi1ll1ii11ll + 2] = liIlI11l11illilIII1[lIliilIiIIi1ll1ii11ll + 3] else llI1l11lIIlliillI1I = llI1l11lIIlliillI1I + 1 end end elseif i11l1IiIIIlIii11Iil >= 4 then if i11l1IiIIIlIii11Iil == 5 then liIlI11l11illilIII1[IillI1i11lI1i1l1iIi[10]] = IillI1i11lI1i1l1iIi[8] else local iIIlllIlli1lilIl1li if IillI1i11lI1i1l1iIi[1] then iIIlllIlli1lilIl1li = IillI1i11lI1i1l1iIi[9] else iIIlllIlli1lilIl1li = liIlI11l11illilIII1[IillI1i11lI1i1l1iIi[6]] end liIlI11l11illilIII1[IillI1i11lI1i1l1iIi[10]] = liIlI11l11illilIII1[IillI1i11lI1i1l1iIi[2]][iIIlllIlli1lilIl1li] end else local lIlii1lii11iI1IIIilli, iIIlllIlli1lilIl1li if IillI1i11lI1i1l1iIi[7] then lIlii1lii11iI1IIIilli = IillI1i11lI1i1l1iIi[3] else lIlii1lii11iI1IIIilli = liIlI11l11illilIII1[IillI1i11lI1i1l1iIi[2]] end if IillI1i11lI1i1l1iIi[1] then iIIlllIlli1lilIl1li = IillI1i11lI1i1l1iIi[9] else iIIlllIlli1lilIl1li = liIlI11l11illilIII1[IillI1i11lI1i1l1iIi[6]] end if lIlii1lii11iI1IIIilli < iIIlllIlli1lilIl1li ~= (IillI1i11lI1i1l1iIi[10] ~= 0) then llI1l11lIIlliillI1I = llI1l11lIIlliillI1I + 1 end end elseif i11l1IiIIIlIii11Iil >= 18 then if i11l1IiIIIlIii11Iil < 21 then if i11l1IiIIIlIii11Iil < 19 then llI1l11lIIlliillI1I = llI1l11lIIlliillI1I + (IillI1i11lI1i1l1iIi[4] - lilIl1l11li1II11IiI) elseif i11l1IiIIIlIii11Iil ~= 20 then if IillI1i11lI1i1l1iIi[2] == 120 then llI1l11lIIlliillI1I = llI1l11lIIlliillI1I - 1 llI1il1lI1I1ilIl1l1[llI1l11lIIlliillI1I] = { [5] = 8, [10] = (IillI1i11lI1i1l1iIi[10] - 137) % 256, [2] = (IillI1i11lI1i1l1iIi[6] - 137) % 256 } elseif not not liIlI11l11illilIII1[IillI1i11lI1i1l1iIi[10]] == (IillI1i11lI1i1l1iIi[6] == 0) then llI1l11lIIlliillI1I = llI1l11lIIlliillI1I + 1 end else local ll1111lIiii1ilIlIi1 = (IillI1i11lI1i1l1iIi[6] - 1) * 50 local liiiiii1l1l1illlI11 = IillI1i11lI1i1l1iIi[2] if liiiiii1l1l1illlI11 == 0 then liiiiii1l1l1illlI11 = ilI1Iii1i1ll1Iii1Ii - IillI1i11lI1i1l1iIi[10] end for llIiliIl1IlI1ll11Il = 1, liiiiii1l1l1illlI11 do liIlI11l11illilIII1[IillI1i11lI1i1l1iIi[10]][ll1111lIiii1ilIlIi1 + llIiliIl1IlI1ll11Il] = liIlI11l11illilIII1[IillI1i11lI1i1l1iIi[10] + llIiliIl1IlI1ll11Il] end end elseif i11l1IiIIIlIii11Iil >= 23 then if i11l1IiIIIlIii11Iil ~= 24 then liIlI11l11illilIII1[IillI1i11lI1i1l1iIi[10]] = { lilIll1lili1IiiIIl1(I1IllIIIillI1I1l11I, 1, IillI1i11lI1i1l1iIi[2] == 0 and 255 or IillI1i11lI1i1l1iIi[2]) } elseif IillI1i11lI1i1l1iIi[6] == 149 then llI1l11lIIlliillI1I = llI1l11lIIlliillI1I - 1 llI1il1lI1I1ilIl1l1[llI1l11lIIlliillI1I] = { [5] = 17, [10] = (IillI1i11lI1i1l1iIi[10] - 164) % 256, [2] = (IillI1i11lI1i1l1iIi[2] - 164) % 256 } else lIIIl1IiIiiIIllIi1l[liIlI11l11illilIII1] = nil local lIliilIiIIi1ll1ii11ll = IillI1i11lI1i1l1iIi[10] local lIlii11iiIlIl1lIIilll = IillI1i11lI1i1l1iIi[2] if lIlii11iiIlIl1lIIilll == 1 then return true end local IIIiiIl1i1IiIliil1i = lIliilIiIIi1ll1ii11ll + lIlii11iiIlIl1lIIilll - 2 if lIlii11iiIlIl1lIIilll == 0 then IIIiiIl1i1IiIliil1i = ilI1Iii1i1ll1Iii1Ii end return true, lIliilIiIIi1ll1ii11ll, IIIiiIl1i1IiIliil1i end elseif i11l1IiIIIlIii11Iil == 22 then if IillI1i11lI1i1l1iIi[6] == 140 then llI1l11lIIlliillI1I = llI1l11lIIlliillI1I - 1 llI1il1lI1I1ilIl1l1[llI1l11lIIlliillI1I] = { [5] = 11, [10] = (IillI1i11lI1i1l1iIi[10] - 246) % 256, [2] = (IillI1i11lI1i1l1iIi[2] - 246) % 256 } elseif IillI1i11lI1i1l1iIi[6] == 134 then llI1l11lIIlliillI1I = llI1l11lIIlliillI1I - 1 llI1il1lI1I1ilIl1l1[llI1l11lIIlliillI1I] = { [5] = 14, [10] = (IillI1i11lI1i1l1iIi[10] - 89) % 256, [2] = (IillI1i11lI1i1l1iIi[2] - 89) % 256 } else local lllI1I1i1li111ii1li = IillI1i11lI1i1l1iIi[10] local lIIIiiii1lIii1iIlIl = {} for IIiiil11lIiil11iii1, IiliIlII1l1iIii1III in pairs(lIIIl1IiIiiIIllIi1l[liIlI11l11illilIII1]) do for IIiiil11lIiil11iii1, lIlilllIilIi1i1i11iI1 in pairs(IiliIlII1l1iIii1III) do if lIlilllIilIi1i1i11iI1[1] == liIlI11l11illilIII1 and lllI1I1i1li111ii1li <= lIlilllIilIi1i1i11iI1[2] then local l11lliIlilliiIll1ii = lIlilllIilIi1i1i11iI1[2] if not lIIIiiii1lIii1iIlIl[l11lliIlilliiIll1ii] then lIl1lIi11ili11I1iIllI(ll11Il1iiI1iiil1iIl, liIlI11l11illilIII1[l11lliIlilliiIll1ii]) lIIIiiii1lIii1iIlIl[l11lliIlilliiIll1ii] = #ll11Il1iiI1iiil1iIl end lIlilllIilIi1i1i11iI1[1] = ll11Il1iiI1iiil1iIl lIlilllIilIi1i1i11iI1[2] = lIIIiiii1lIii1iIlIl[l11lliIlilliiIll1ii] end end end end else liIlI11l11illilIII1[IillI1i11lI1i1l1iIi[10]] = IillI1i11lI1i1l1iIi[2] ~= 0 if IillI1i11lI1i1l1iIi[6] ~= 0 then llI1l11lIIlliillI1I = llI1l11lIIlliillI1I + 1 end end elseif i11l1IiIIIlIii11Iil >= 15 then if i11l1IiIIIlIii11Iil >= 16 then if i11l1IiIIIlIii11Iil ~= 17 then local lIlii1lii11iI1IIIilli, iIIlllIlli1lilIl1li if IillI1i11lI1i1l1iIi[7] then lIlii1lii11iI1IIIilli = IillI1i11lI1i1l1iIi[3] else lIlii1lii11iI1IIIilli = liIlI11l11illilIII1[IillI1i11lI1i1l1iIi[2]] end if IillI1i11lI1i1l1iIi[1] then iIIlllIlli1lilIl1li = IillI1i11lI1i1l1iIi[9] else iIIlllIlli1lilIl1li = liIlI11l11illilIII1[IillI1i11lI1i1l1iIi[6]] end liIlI11l11illilIII1[IillI1i11lI1i1l1iIi[10]][lIlii1lii11iI1IIIilli] = iIIlllIlli1lilIl1li else liIlI11l11illilIII1[IillI1i11lI1i1l1iIi[10]] = liIlI11l11illilIII1[IillI1i11lI1i1l1iIi[2]] end else local lIliilIiIIi1ll1ii11ll = IillI1i11lI1i1l1iIi[10] local IiIlIl1l11II1liiill = IillI1i11lI1i1l1iIi[2] local lIll1liI11lIli1lI1lIl = IillI1i11lI1i1l1iIi[6] local I1IiI11illilIliiilI, IIIiiIl1i1IiIliil1i, lllI11i1i11iiIi1I1l if IiIlIl1l11II1liiill ~= 1 then if IiIlIl1l11II1liiill ~= 0 then IIIiiIl1i1IiIliil1i = lIliilIiIIi1ll1ii11ll + IiIlIl1l11II1liiill - 1 else IIIiiIl1i1IiIliil1i = ilI1Iii1i1ll1Iii1Ii end IIIiiIl1i1IiIliil1i, I1IiI11illilIliiilI = I1iII11iIlI1iIiiIIl(liIlI11l11illilIII1[lIliilIiIIi1ll1ii11ll](lilIll1lili1IiiIIl1(liIlI11l11illilIII1, lIliilIiIIi1ll1ii11ll + 1, IIIiiIl1i1IiIliil1i))) else IIIiiIl1i1IiIliil1i, I1IiI11illilIliiilI = I1iII11iIlI1iIiiIIl(liIlI11l11illilIII1[lIliilIiIIi1ll1ii11ll]()) end if lIll1liI11lIli1lI1lIl ~= 1 then if lIll1liI11lIli1lI1lIl ~= 0 then IIIiiIl1i1IiIliil1i = lIliilIiIIi1ll1ii11ll + lIll1liI11lIli1lI1lIl - 2 ilI1Iii1i1ll1Iii1Ii = IIIiiIl1i1IiIliil1i + 1 else IIIiiIl1i1IiIliil1i = IIIiiIl1i1IiIliil1i + lIliilIiIIi1ll1ii11ll - 1 ilI1Iii1i1ll1Iii1Ii = IIIiiIl1i1IiIliil1i end lllI11i1i11iiIi1I1l = 0 for llIiliIl1IlI1ll11Il = lIliilIiIIi1ll1ii11ll, IIIiiIl1i1IiIliil1i do lllI11i1i11iiIi1I1l = lllI11i1i11iiIi1I1l + 1 liIlI11l11illilIII1[llIiliIl1IlI1ll11Il] = I1IiI11illilIliiilI[lllI11i1i11iiIi1I1l] end else ilI1Iii1i1ll1Iii1Ii = lIliilIiIIi1ll1ii11ll - 1 end for llIiliIl1IlI1ll11Il = ilI1Iii1i1ll1Iii1Ii + 1, IIli1Ii11ilIiiI1Il1 do liIlI11l11illilIII1[llIiliIl1IlI1ll11Il] = nil end end elseif i11l1IiIIIlIii11Iil >= 13 then if i11l1IiIIIlIii11Iil == 14 then if IillI1i11lI1i1l1iIi[6] == 96 then llI1l11lIIlliillI1I = llI1l11lIIlliillI1I - 1 llI1il1lI1I1ilIl1l1[llI1l11lIIlliillI1I] = { [5] = 19, [10] = (IillI1i11lI1i1l1iIi[10] - 232) % 256, [6] = (IillI1i11lI1i1l1iIi[2] - 232) % 256 } else liIlI11l11illilIII1[IillI1i11lI1i1l1iIi[10]] = not liIlI11l11illilIII1[IillI1i11lI1i1l1iIi[2]] end else local IlilI1IIIII11iiiIll = lIlIlIi1l1iiill1lII1i[IillI1i11lI1i1l1iIi[4]] local lilIiiii1illliilIII = {} if IlilI1IIIII11iiiIll[Illli11li1iIiIIIilI] > 0 then do local IiliIlII1l1iIii1III = {} lilIiiii1illliilIII = IIlIi111IlIilllI1l1({}, { __index = function(Ii11Ili1iI1iilliI1I, lliiii1IiI1l1lIIili) local lIlilllIilIi1i1i11iI1 = IiliIlII1l1iIii1III[lliiii1IiI1l1lIIili] return lIlilllIilIi1i1i11iI1[1][lIlilllIilIi1i1i11iI1[2]] end, __newindex = function(Ii11Ili1iI1iilliI1I, lliiii1IiI1l1lIIili, lIliI1ll1Illi1iIli111) local lIlilllIilIi1i1i11iI1 = IiliIlII1l1iIii1III[lliiii1IiI1l1lIIili] lIlilllIilIi1i1i11iI1[1][lIlilllIilIi1i1i11iI1[2]] = lIliI1ll1Illi1iIli111 end }) for llIiliIl1IlI1ll11Il = 1, IlilI1IIIII11iiiIll[Illli11li1iIiIIIilI] do local lllliIlillI1lII111I = llI1il1lI1I1ilIl1l1[llI1l11lIIlliillI1I] if lllliIlillI1lII111I[ili1iIIIilllI1IIiii] == i1lil11i1IIlllliiil then IiliIlII1l1iIii1III[llIiliIl1IlI1ll11Il - 1] = { liIlI11l11illilIII1, lllliIlillI1lII111I[llIiliIIilIliiiI11l] } elseif lllliIlillI1lII111I[ili1iIIIilllI1IIiii] == liIIIlll1IIlllIIl1I then IiliIlII1l1iIii1III[llIiliIl1IlI1ll11Il - 1] = { lIlIliii1l111I1i1II1l, lllliIlillI1lII111I[llIiliIIilIliiiI11l] } end llI1l11lIIlliillI1I = llI1l11lIIlliillI1I + 1 end if not lIIIl1IiIiiIIllIi1l[liIlI11l11illilIII1] then lIIIl1IiIiiIIllIi1l[liIlI11l11illilIII1] = {IiliIlII1l1iIii1III} else lIlili11liIl1ilIIII(lIIIl1IiIiiIIllIi1l[liIlI11l11illilIII1], IiliIlII1l1iIii1III) end end end local l1lIiil11iiIIli1i11 = lIl1lIi11ili11I1iIllI(IlilI1IIIII11iiiIll, Ilii1liI1Ili111lliI, lilIiiii1illliilIII) liIlI11l11illilIII1[IillI1i11lI1i1l1iIi[10]] = l1lIiil11iiIIli1i11 end else local lIlii1lii11iI1IIIilli, iIIlllIlli1lilIl1li if IillI1i11lI1i1l1iIi[7] then lIlii1lii11iI1IIIilli = IillI1i11lI1i1l1iIi[3] else lIlii1lii11iI1IIIilli = liIlI11l11illilIII1[IillI1i11lI1i1l1iIi[2]] end if IillI1i11lI1i1l1iIi[1] then iIIlllIlli1lilIl1li = IillI1i11lI1i1l1iIi[9] else iIIlllIlli1lilIl1li = liIlI11l11illilIII1[IillI1i11lI1i1l1iIi[6]] end liIlI11l11illilIII1[IillI1i11lI1i1l1iIi[10]] = lIlii1lii11iI1IIIilli - iIIlllIlli1lilIl1li end end end local Ili1ll1I1i1iiI11ll1, Iii1IlIllii111ll1Ii, lllI1I1i1li111ii1li, l1I11iIll1l111lI1ii = iliiIi1iIiliIIIIIIi(lllI11i1i11iiIi1I1l) if Ili1ll1I1i1iiI11ll1 then if lllI1I1i1li111ii1li then return lilIll1lili1IiiIIl1(liIlI11l11illilIII1, lllI1I1i1li111ii1li, l1I11iIll1l111lI1ii) end else ililllii11liiiIi1iI("Luraph Script:" .. (IlIliiiI11I1Il1Illl[llI1l11lIIlliillI1I - 1] or "") .. ": " .. IIlilliiIiI11111Ili(Iii1IlIllii111ll1Ii), 0) end end iIlill11IIlI1i1iIil(lIli1IiIi1I1IiI1Il1lI, Ilii1liI1Ili111lliI) return lIli1IiIi1I1IiI1Il1lI end local lIIIiiii1lIii1iIlIl = lIl11illIiilIi1lliiII() return lIl1lIi11ili11I1iIllI(lIIIiiii1lIii1iIlIl, Ilii1liI1Ili111lliI)() end return I1I1IiiIi11I1IllI1llIll1IiiiIiIIiIlil11I()) 
